df %>%
group_by(user_id) %>%
filter(row_number()==1) %>%
ggplot(aes(x = duration_days)) +
geom_histogram(bins = 50, col = "grey", size = 0.1)+
theme_minimal()+
scale_y_log10()+
scale_x_log10()+
labs(x = "Number of days in the study",
y = "Number of participants")
dfy1 <- df %>%
filter(version == "v2016")
p1 <- dfy1 %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1, "high", "low")) %>%
ggplot(aes(x = engagement_threshold))+
geom_bar()+
scale_y_continuous(breaks = seq(0, 5000, 500),
limits = c(0, 5000))+
labs(x = "Engagement (threshold = 1)", y = "Number of participants")+
theme_minimal()
p2 <- dfy1 %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 3, "high", "low")) %>%
ggplot(aes(x = engagement_threshold))+
geom_bar()+
scale_y_continuous(breaks = seq(0, 5000, 500),
limits = c(0, 5000))+
labs(x = "Engagement (threshold = 3)", y = "Number of participants")+
theme_minimal()
p3 <- dfy1 %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 5, "high", "low")) %>%
ggplot(aes(x = engagement_threshold))+
geom_bar()+
scale_y_continuous(breaks = seq(0, 5000, 500),
limits = c(0, 5000))+
labs(x = "Engagement (threshold = 5)", y = "Number of participants")+
theme_minimal()
p4 <- dfy1 %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 10, "high", "low")) %>%
ggplot(aes(x = engagement_threshold))+
scale_y_continuous(breaks = seq(0, 5000, 500),
limits = c(0, 5000))+
geom_bar()+
labs(x = "Engagement (threshold = 10)", y = "Number of participants")+
theme_minimal()
(p1 | p2 ) /
(p3 | p4)
counts_by_cluster <- dfy1 %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
left_join(yr1_k4_clusters,by = "user_id")
#Loading these manually as they take a long time to run
yr1_k4 <- readRDS(file = here::here("Clusterings", "yr1_k4"))
yr1_k4_clusters <- readRDS(file = here::here("Clusterings", "yr1_k4_clusters" ))
counts_by_cluster <- dfy1 %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
left_join(yr1_k4_clusters,by = "user_id")
counts_by_cluster %>%
ggplot(aes(x = cluster))+
geom_bar()+
scale_y_continuous(breaks = seq(0, 3500, 500),
limits = c(0, 3500))+
labs(x = "Cluster", y = "Number of participants")+
theme_minimal()
#
#counts_by_cluster %>%
#  group_by(cluster) %>%
# summarise(mean = mean(n),
#           median = median(n))
df %>%
group_by(user_id) %>%
filter(row_number()==1)
df %>%
group_by(user_id) %>%
filter(row_number()==1) %>%
ggplot(aes(x = duration_days)) +
geom_histogram(bins = 50, col = "grey", size = 0.1)+
theme_minimal()+
scale_y_log10()+
scale_x_log10()+
labs(x = "Number of days in the study",
y = "Number of participants")
df_high <- df %>% filter(engagement_threshold == "high")
library(tidymodels)
tidymodels_prefer()
conflicted::conflict_prefer("View", "utils")
data <- read_csv(here::here("Data",
"base_file_all_final.csv"))
df <- data %>%
filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
filter(version == "v2016"), by = "user_id")
library(tidyverse)
data <- read_csv(here::here("Data",
"base_file_all_final.csv"))
df <- data %>%
filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
filter(version == "v2016"), by = "user_id")
df_high <- df %>% filter(engagement_threshold == "high")
df_low <- df %>% filter(engagement_threshold == "low")
df_high <- df %>% filter(engagement_threshold == "high")
df_low <- df %>% filter(engagement_threshold == "low")
bootstrap_high <- bootstraps(df_high, times = 10)
bootstrap_low <- bootstraps(df_low, times = 10)
View(bootstrap_high)
test <- bootstrap_high %>%
summarise(mean = mean(how_im_doing))
test <- bootstrap_high %>%
summarise(mean = mean(how_im_doing))
library(tidymodels)
library(tidyverse)
conflicted::conflict_prefer("View", "utils")
data <- read_csv(here::here("Data",
"base_file_all_final.csv"))
df <- data %>%
filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
filter(version == "v2016"), by = "user_id")
df <- data %>%
filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
dplyr::filter(version == "v2016"), by = "user_id")
df <- data %>%
dplyr::filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
dplyr::filter(version == "v2016"), by = "user_id")
conflict_prefer("filter", "dplyr")
conflicted::conflict_prefer("filter", "dplyr")
df <- data %>%
filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
filter(version == "v2016"), by = "user_id")
df_high <- df %>% filter(engagement_threshold == "high")
df_low <- df %>% filter(engagement_threshold == "low")
bootstrap_high <- bootstraps(df_high, times = 10)
bootstrap_low <- bootstraps(df_low, times = 10)
analysis(split)$how_im_doing
mean <- function(splits) {
x <- analysis(splits)
mean(x$how_im_doing)
}
test <- bootstrap_high %>%
mutate(mean = map(splits, mean))
bootstrap_high$mean <- map_dbl(bootstrap_high$splits, mean)
View(bootstrap_low)
?class
class(bootstrap_high)
x <- analysis(splits),
mean(x$how_im_doing)
mean <- function(splits) {
x <- analysis(splits),
mean(x$how_im_doing)
}
mean <- function(splits) {
x <- analysis(splits)
mean(x$how_im_doing)
}
test <- bootstrap_high %>%
mutate(mean = map(splits, mean))
analysis(bootstrap_high)
mean <- function(splits) {
mean(analysis(splits)$how_im_doing)
}
test <- bootstrap_high %>%
mutate(mean = map(splits, mean))
fun <- function(splits) {
mean(analysis(splits)$how_im_doing)
}
test <- bootstrap_high %>%
mutate(mean = map(splits, fun))
mean(df_high$how_im_doing)
df_high$how_im_doing
mean(df_high$how_im_doing)
mean(df_high$how_im_doing)
mean(df_low$how_im_doing)
?tribble
blah <- tribble(
~colA, ~colB,
"a",   1,
"b",   2,
"c",   3
)
mean(blah$colA)
apples <- data.frame(size = rnorm(100000, 5, 2))
oranges <- data.frame(size = rnorm(5000, 5, 2))
apples$fruit <- 'apple'
oranges$fruit <- 'orange'
bootstrap_apples <- bootstraps(apples , times = 5000)
bootstrap_oranges <- bootstraps(oranges, times = 5000)
library(rsample)
bootstrap_apples <- bootstraps(apples , times = 50)
bootstrap_oranges <- bootstraps(oranges, times = 50)
fun <- function(splits) {
mean(analysis(splits)$size)
}
test_apples <- bootstrap_apples %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "apple")
library(tidyverse)
test_apples <- bootstrap_apples %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "apple")
test_oranges <- bootstrap_oranges %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "orange")
means <- test_apples %>%
rbind(test_oranges)
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
bootstrap_apples <- bootstraps(apples , times = 1000)
bootstrap_oranges <- bootstraps(oranges, times = 1000)
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$size)
}
#Creating a df of bootstrapped means
test_apples <- bootstrap_apples %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "apple")
test_oranges <- bootstrap_oranges %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "orange")
means <- test_apples %>%
rbind(test_oranges)
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
position = 'identity')+
theme_minimal()
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Load library: -----------------------------------------------------------
library(rsample)
library(tidyverse)
library(patchwork)
#conflicted::conflict_prefer("View", "utils")
#conflicted::conflict_prefer("filter", "dplyr")
# Load data: --------------------------------------------------------------
data <- read_csv(here::here("Data",
"base_file_all_final.csv"))
df <- data %>%
filter(version == "v2016") %>%
group_by(user_id) %>%
count() %>%
ungroup() %>%
mutate(engagement_threshold = if_else(n > 1,
"high", "low")) %>%
right_join(data %>%
filter(version == "v2016"), by = "user_id")
# Bootstrapped version: ---------------------------------------------------
# Creating 10000 bootstraped data sets:
df_high <- df %>% filter(engagement_threshold == "high")
df_low <- df %>% filter(engagement_threshold == "low")
bootstrap_high <- bootstraps(df_high, times = 5000)
bootstrap_low <- bootstraps(df_low, times = 5000)
# How I'm doing -----------------------------------------------------------
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$how_im_doing)
}
#Creating a df of bootstrapped means
test <- bootstrap_high %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "high")
test2 <- bootstrap_low %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "low")
means <- test %>%
rbind(test2)
p1 <- ggplot(means, aes(avg, fill = group)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Nose --------------------------------------------------------------------
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$nose)
}
#Creating a df of bootstrapped means
test <- bootstrap_high %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "high")
test2 <- bootstrap_low %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "low")
means <- test %>%
rbind(test2)
p2 <- ggplot(means, aes(avg, fill = group)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Eyes --------------------------------------------------------------------
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$eyes)
}
#Creating a df of bootstrapped means
test <- bootstrap_high %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "high")
test2 <- bootstrap_low %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "low")
means <- test %>%
rbind(test2)
p3 <- ggplot(means, aes(avg, fill = group)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Breathing --------------------------------------------------------------------
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$breathing)
}
#Creating a df of bootstrapped means
test <- bootstrap_high %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "high")
test2 <- bootstrap_low %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
group = "low")
means <- test %>%
rbind(test2)
p4 <- ggplot(means, aes(avg, fill = group)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
p1|p2|p3|p4
# Is higher variance for smaller groups just mechanically the case --------
#Making some fake data
apples <- data.frame(size = rnorm(100000, 5, 2))
oranges <- data.frame(size = rnorm(5000, 5, 2))
apples$fruit <- 'apple'
oranges$fruit <- 'orange'
#Bootstrapping
bootstrap_apples <- bootstraps(apples , times = 1000)
bootstrap_oranges <- bootstraps(oranges, times = 1000)
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$size)
}
#Creating a df of bootstrapped means
test_apples <- bootstrap_apples %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "apple")
test_oranges <- bootstrap_oranges %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "orange")
means <- test_apples %>%
rbind(test_oranges)
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Yes
apples <- data.frame(size = runif(100000, 5, 2))
oranges <- data.frame(size = runif(5000, 5, 2))
apples <- data.frame(size = runif(100000, min = 0, max = 5))
oranges <- data.frame(size = runif(5000, min = 0, max = 5))
apples$fruit <- 'apple'
oranges$fruit <- 'orange'
#Bootstrapping
bootstrap_apples <- bootstraps(apples , times = 1000)
bootstrap_oranges <- bootstraps(oranges, times = 1000)
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$size)
}
#Creating a df of bootstrapped means
test_apples <- bootstrap_apples %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "apple")
test_oranges <- bootstrap_oranges %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "orange")
means <- test_apples %>%
rbind(test_oranges)
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Yes
# Is higher variance for smaller groups just mechanically the case --------
#Making some fake data
#normal
apples <- data.frame(size = rnorm(100000, 5, 2))
oranges <- data.frame(size = rnorm(5000, 5, 2))
#uniform (same problem)
#apples <- data.frame(size = runif(100000, min = 0, max = 5))
#
#oranges <- data.frame(size = runif(5000, min = 0, max = 5))
apples$fruit <- 'apple'
oranges$fruit <- 'orange'
#Bootstrapping
bootstrap_apples <- bootstraps(apples , times = 1000)
bootstrap_oranges <- bootstraps(oranges, times = 1000)
#Mean calculating function
fun <- function(splits) {
mean(analysis(splits)$size)
}
#Creating a df of bootstrapped means
test_apples <- bootstrap_apples %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "apple")
test_oranges <- bootstrap_oranges %>%
transmute(avg = map(splits, fun),
avg = as.numeric(avg),
fruit = "orange")
means <- test_apples %>%
rbind(test_oranges)
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
# Yes
ggplot(means, aes(avg, fill = fruit)) +
geom_histogram(alpha = 0.5,
bins = 70,
aes(y = ..density..),
position = 'identity')+
theme_minimal()
